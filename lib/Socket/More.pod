=head1 NAME

Socket::More - Per interface passive address generator, information and more

=head1 SYNOPSIS

Bring into your namespace. This overrides C<socket> also:

	use v5.36;
	use Socket::More ":all";


Simple list of all interfaces:

	#List basic interface information on all available interfaces
	my @ifs=getifaddrs;
	say $_->{name} for @ifs;


Flexible way to create interface scoped passive (listen) address across
families. Special 'unix' interface for easy of use. All invalid combinations of
family, port  and paths are discarded:

	#Create passive (listening) sockets for selected interfaces
	my @passive=sockaddr_passive {
		interface=>	["eth0", "unix"],
		port=>		[5566, 7788],
		path=>"path_to_sock"
	};
		
	#All invalid family/interface/port/path  combinations are filtered out
	#leaving only valid info
	say $_->{address} for @passive;

Can use a socket wrapper which takes family OR a packed address directly:

	#Notice socket can be called here with the addr OR the family
	for(@passive){
		die "Could not create socket $!"
			unless socket my $socket, $_->{addr}, SOCK_STREAM,0;

		bind $socket,$_->{addr}
	}

	

=head1 DESCRIPTION

Subroutines for working passive network addresses and utility functions for
conversion of socket types and address families to and from strings.  It's
intended to operate with INET, INET6 and UNIX address families and complement
the C<Socket> module.

Some of the routines implemented are C<sockaddr_passive>, C<getifaddrs>,
C<parse_passive_spec>, C<family_to_string>, C<string_to_family>. Please see the
L<API> section for  a complete listing.

Instead of listening to all interfaces with a wildcard addresses, this module
makes it easy to generate the data structures to bind on multiple addresses,
socket types, and families on a particular set of interfaces, by name.  In
short it facilitates solutions to questions like: 'listen on interface eth0 using
IPv6 and port numbers 9090 and 9091.'.

This power is also accessible in helper routines to allow programs to parse
command line arguments which can leverage its flexibility.

No symbols are exported by default. All symbols can be exported with the ":all"
tag or individually by name


=head1 MOTIVATION

I wanted an easy way to listen on a particular interface ONLY.  The normal way
of wild card addresses "0.0.0.0" or the unspecified IPv6 address, will listen
on all interfaces. Any restrictions on connecting sockets will either need to
be implemented in the firewall or in application code accepting and then
closing the connection, which is a waste of resources.

Manually creating the multitude of potential addresses on the same interface
(especially for IPv6) is a pain to maintain.



=head1 POTENTIAL FUTURE WORK

-A more expanded network interface queries for byte counts, rates.. etc

-Support for more address family types (i.e link)

=head1 API

=head2 socket

	socket $socket, $domain_or_addr, $type, $proto


	example:
		die "$!" unless socket my $socket, AF_INET, SOCK_STREAM,0;

		
		die "$!" unless socket my $socket, $sockaddr, SOCK_STREAM,0;

A wrapper around C<CORE::socket>.  It checks if the C<DOMAIN> is a number.  If
so, it simply calls C<CORE::socket> with the supplied arguments.

Otherwise it assumes C<DOMAIN> is a packed sockaddr structure and extracts the
domain/family field using C<sockaddr_family>. This value is then used as the
C<DOMAIN> value in a call to C<CORE::socket>.

Return values are as per C<CORE::socket>. Please refer to L<perldoc -f socket>
for more.


=head2 getifaddrs

	my @interfaces=getifaddrs;

Queries the OS via  C<getifaddr> for the list of interfaces currently active.
Returns a list of hash references representing the network interfaces. The keys
of these hashes include:
	
=over

=item	name

The text name of the interface

=item flags

Flags set on the interface

=item	addr

Packed sockaddr structure suitable for use with C<bind>


=item	netmask

Packed sockaddr structure of the netmask

=item	dstmask

Packed sockaddr structure of the dstmask


=back

=head2 family_to_string

	my $string=family_to_string($family);

Returns a string label representing C<$family>. For example, calling with
AF_INET, will return a string C<"AF_INET">


=head2 string_to_family

	my @family=string_to_family($pattern);

Performs a match of all AF_.* names against C<$pattern>. Returns a list of
integers for the corresponding address family that matched. Returns an empty
list if the patten/string does not match.


=head2 sock_to_string

	my $string=sock_to_string($type);

Returns a string label representing C<$type>. For example, calling with the
integer constant SOCK_STREAM, will return a string C<"SOCK_STREAM">

=head2 string_to_sock

	my @type=string_to_family($string);

Performs a match of all SOCK_.* names against C<$pattern>. Returns a list of
integers for the corresponding socket types that matched. Returns an empty list
if the patten/string does not match.


=head2 sockaddr_passive

	my @interfaces=sockadd_passive $specification;

Returns a list of 'interface' structures (similar to getifaddr above) which
provide meta data and packed address structures suitable for passive use (i.e
bind) and matching the C<$specification>.



A specification hash has optional keys which dictate what addresses are
generated and filtered.
	{
		interface=>"en",
		family=>"INET",
		port=>[1234]
		...
	}

The only required keys are C<port> and/or C<path>. These are used in the
address generation and not as a filter. Other keys like C<interface> and
C<family> for example are used to restrict the number of addresses created.

Finally keys like C<address> are a final filter which are directly matched
against the address 


It can include the following keys:
	
=over 

=item interface
		
	examples: 
	interface=>"eth0"
	interface=>"eth\d*";
	interface=>["eth0", "lo"];
	interface=>"unix";
	interface=>["unix", "lo"];

A string or array ref of strings which are used as regex to match interface
names currently available.

=item familiy

	examples: family=>AF_INET family=>[AF_INET, AF_INET6, AF_UNIX]

A integer or array ref of integers representing the family type an interface
supports.


=item port

	examples: port=>55554 port=>[12345,12346]

The ports used in generating a passive address. Only applied to AF_INET*
families. Ignored for others


=item path

	examples: path=>"path_to_socket.sock" path=>["path_to_socket1.sock",
	"path_to_socket2.sock"]

The path used in generating a passive address. Only applied to AF_UNIX
families. Ignored for others

=item address

	exmples: 
		address=>"192\.168\.1\.1" 
		address=>"169\.254\."

As string used

=item data

	examples: data=>$scalar datea=>{ ca=>$ca_path, pkey=>$p_path}

A user field which will be included in each item in the output list. 

=back

=head2 parse_passive_spec

	my @spec=parse_passive_spec($string);

Parses a concise string intended to be supplied as a command line argument. The
string consists of one or more fields separated by commas.

The fields are in key value pairs in the form

	key=value

key can be any key for C<sockaddr_passive>, and C<value>is interpreted as a
regex. 

For example, the following parse a sockaddr_passive specification which would
match SOCK_STREAM sockets, for both AF_INET and AF_INET6 families, on all
available interfaces.

	family=INET,type=STREAM


In the special case of a single field, if the field DOES NOT contain a '=', it
is interpreted as the plack computable listen switch argument.

	HOST:PORT	:PORT PATH

This only will generate IPv4 matching specifications, with SOCK_STREAM type. Note also that HOST is represents a regex not a literal IP, not does it do  host look up



=head1 SEE ALSO

L<Net::Interface> seems broken at the time of writing L<IO::Interface> works
with IPv4 addressing only

=head1 AUTHOR

Ruben Westerberg, E<lt>drclaw@mac.com<gt>

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2022 by Ruben Westerberg

This library is free software; you can redistribute it and/or modify it under
the same terms as Perl or the MIT license.

=head1 DISCLAIMER OF WARRANTIES

THIS PACKAGE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES,
INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS FOR A PARTICULAR PURPOSE.

=cut
